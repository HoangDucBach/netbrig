/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface IERC20ConversionProxyInterface extends Interface {
  getFunction(
    nameOrSignature: "transferFromWithReferenceAndFee"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "TransferWithConversionAndReference"
      | "TransferWithReferenceAndFee"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "transferFromWithReferenceAndFee",
    values: [
      AddressLike,
      BigNumberish,
      AddressLike[],
      BytesLike,
      BigNumberish,
      AddressLike,
      BigNumberish,
      BigNumberish
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "transferFromWithReferenceAndFee",
    data: BytesLike
  ): Result;
}

export namespace TransferWithConversionAndReferenceEvent {
  export type InputTuple = [
    amount: BigNumberish,
    currency: AddressLike,
    paymentReference: BytesLike,
    feeAmount: BigNumberish,
    maxRateTimespan: BigNumberish
  ];
  export type OutputTuple = [
    amount: bigint,
    currency: string,
    paymentReference: string,
    feeAmount: bigint,
    maxRateTimespan: bigint
  ];
  export interface OutputObject {
    amount: bigint;
    currency: string;
    paymentReference: string;
    feeAmount: bigint;
    maxRateTimespan: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferWithReferenceAndFeeEvent {
  export type InputTuple = [
    tokenAddress: AddressLike,
    to: AddressLike,
    amount: BigNumberish,
    paymentReference: BytesLike,
    feeAmount: BigNumberish,
    feeAddress: AddressLike
  ];
  export type OutputTuple = [
    tokenAddress: string,
    to: string,
    amount: bigint,
    paymentReference: string,
    feeAmount: bigint,
    feeAddress: string
  ];
  export interface OutputObject {
    tokenAddress: string;
    to: string;
    amount: bigint;
    paymentReference: string;
    feeAmount: bigint;
    feeAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IERC20ConversionProxy extends BaseContract {
  connect(runner?: ContractRunner | null): IERC20ConversionProxy;
  waitForDeployment(): Promise<this>;

  interface: IERC20ConversionProxyInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  transferFromWithReferenceAndFee: TypedContractMethod<
    [
      _to: AddressLike,
      _requestAmount: BigNumberish,
      _path: AddressLike[],
      _paymentReference: BytesLike,
      _feeAmount: BigNumberish,
      _feeAddress: AddressLike,
      _maxToSpend: BigNumberish,
      _maxRateTimespan: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "transferFromWithReferenceAndFee"
  ): TypedContractMethod<
    [
      _to: AddressLike,
      _requestAmount: BigNumberish,
      _path: AddressLike[],
      _paymentReference: BytesLike,
      _feeAmount: BigNumberish,
      _feeAddress: AddressLike,
      _maxToSpend: BigNumberish,
      _maxRateTimespan: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "TransferWithConversionAndReference"
  ): TypedContractEvent<
    TransferWithConversionAndReferenceEvent.InputTuple,
    TransferWithConversionAndReferenceEvent.OutputTuple,
    TransferWithConversionAndReferenceEvent.OutputObject
  >;
  getEvent(
    key: "TransferWithReferenceAndFee"
  ): TypedContractEvent<
    TransferWithReferenceAndFeeEvent.InputTuple,
    TransferWithReferenceAndFeeEvent.OutputTuple,
    TransferWithReferenceAndFeeEvent.OutputObject
  >;

  filters: {
    "TransferWithConversionAndReference(uint256,address,bytes,uint256,uint256)": TypedContractEvent<
      TransferWithConversionAndReferenceEvent.InputTuple,
      TransferWithConversionAndReferenceEvent.OutputTuple,
      TransferWithConversionAndReferenceEvent.OutputObject
    >;
    TransferWithConversionAndReference: TypedContractEvent<
      TransferWithConversionAndReferenceEvent.InputTuple,
      TransferWithConversionAndReferenceEvent.OutputTuple,
      TransferWithConversionAndReferenceEvent.OutputObject
    >;

    "TransferWithReferenceAndFee(address,address,uint256,bytes,uint256,address)": TypedContractEvent<
      TransferWithReferenceAndFeeEvent.InputTuple,
      TransferWithReferenceAndFeeEvent.OutputTuple,
      TransferWithReferenceAndFeeEvent.OutputObject
    >;
    TransferWithReferenceAndFee: TypedContractEvent<
      TransferWithReferenceAndFeeEvent.InputTuple,
      TransferWithReferenceAndFeeEvent.OutputTuple,
      TransferWithReferenceAndFeeEvent.OutputObject
    >;
  };
}
