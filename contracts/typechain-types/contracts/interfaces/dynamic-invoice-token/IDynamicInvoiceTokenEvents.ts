/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  FunctionFragment,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
} from "../../../common";

export interface IDynamicInvoiceTokenEventsInterface extends Interface {
  getEvent(
    nameOrSignatureOrTopic:
      | "DynamicInvoiceTokenCanceled"
      | "DynamicInvoiceTokenPaid"
      | "DynamicInvoiceTokenSpawned"
      | "DynamicInvoiceTokenUpdateProgress"
  ): EventFragment;
}

export namespace DynamicInvoiceTokenCanceledEvent {
  export type InputTuple = [invoice: AddressLike];
  export type OutputTuple = [invoice: string];
  export interface OutputObject {
    invoice: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DynamicInvoiceTokenPaidEvent {
  export type InputTuple = [invoice: AddressLike];
  export type OutputTuple = [invoice: string];
  export interface OutputObject {
    invoice: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DynamicInvoiceTokenSpawnedEvent {
  export type InputTuple = [invoice: AddressLike, childInvoice: AddressLike];
  export type OutputTuple = [invoice: string, childInvoice: string];
  export interface OutputObject {
    invoice: string;
    childInvoice: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DynamicInvoiceTokenUpdateProgressEvent {
  export type InputTuple = [invoice: AddressLike, progress: BigNumberish];
  export type OutputTuple = [invoice: string, progress: bigint];
  export interface OutputObject {
    invoice: string;
    progress: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IDynamicInvoiceTokenEvents extends BaseContract {
  connect(runner?: ContractRunner | null): IDynamicInvoiceTokenEvents;
  waitForDeployment(): Promise<this>;

  interface: IDynamicInvoiceTokenEventsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getEvent(
    key: "DynamicInvoiceTokenCanceled"
  ): TypedContractEvent<
    DynamicInvoiceTokenCanceledEvent.InputTuple,
    DynamicInvoiceTokenCanceledEvent.OutputTuple,
    DynamicInvoiceTokenCanceledEvent.OutputObject
  >;
  getEvent(
    key: "DynamicInvoiceTokenPaid"
  ): TypedContractEvent<
    DynamicInvoiceTokenPaidEvent.InputTuple,
    DynamicInvoiceTokenPaidEvent.OutputTuple,
    DynamicInvoiceTokenPaidEvent.OutputObject
  >;
  getEvent(
    key: "DynamicInvoiceTokenSpawned"
  ): TypedContractEvent<
    DynamicInvoiceTokenSpawnedEvent.InputTuple,
    DynamicInvoiceTokenSpawnedEvent.OutputTuple,
    DynamicInvoiceTokenSpawnedEvent.OutputObject
  >;
  getEvent(
    key: "DynamicInvoiceTokenUpdateProgress"
  ): TypedContractEvent<
    DynamicInvoiceTokenUpdateProgressEvent.InputTuple,
    DynamicInvoiceTokenUpdateProgressEvent.OutputTuple,
    DynamicInvoiceTokenUpdateProgressEvent.OutputObject
  >;

  filters: {
    "DynamicInvoiceTokenCanceled(address)": TypedContractEvent<
      DynamicInvoiceTokenCanceledEvent.InputTuple,
      DynamicInvoiceTokenCanceledEvent.OutputTuple,
      DynamicInvoiceTokenCanceledEvent.OutputObject
    >;
    DynamicInvoiceTokenCanceled: TypedContractEvent<
      DynamicInvoiceTokenCanceledEvent.InputTuple,
      DynamicInvoiceTokenCanceledEvent.OutputTuple,
      DynamicInvoiceTokenCanceledEvent.OutputObject
    >;

    "DynamicInvoiceTokenPaid(address)": TypedContractEvent<
      DynamicInvoiceTokenPaidEvent.InputTuple,
      DynamicInvoiceTokenPaidEvent.OutputTuple,
      DynamicInvoiceTokenPaidEvent.OutputObject
    >;
    DynamicInvoiceTokenPaid: TypedContractEvent<
      DynamicInvoiceTokenPaidEvent.InputTuple,
      DynamicInvoiceTokenPaidEvent.OutputTuple,
      DynamicInvoiceTokenPaidEvent.OutputObject
    >;

    "DynamicInvoiceTokenSpawned(address,address)": TypedContractEvent<
      DynamicInvoiceTokenSpawnedEvent.InputTuple,
      DynamicInvoiceTokenSpawnedEvent.OutputTuple,
      DynamicInvoiceTokenSpawnedEvent.OutputObject
    >;
    DynamicInvoiceTokenSpawned: TypedContractEvent<
      DynamicInvoiceTokenSpawnedEvent.InputTuple,
      DynamicInvoiceTokenSpawnedEvent.OutputTuple,
      DynamicInvoiceTokenSpawnedEvent.OutputObject
    >;

    "DynamicInvoiceTokenUpdateProgress(address,uint8)": TypedContractEvent<
      DynamicInvoiceTokenUpdateProgressEvent.InputTuple,
      DynamicInvoiceTokenUpdateProgressEvent.OutputTuple,
      DynamicInvoiceTokenUpdateProgressEvent.OutputObject
    >;
    DynamicInvoiceTokenUpdateProgress: TypedContractEvent<
      DynamicInvoiceTokenUpdateProgressEvent.InputTuple,
      DynamicInvoiceTokenUpdateProgressEvent.OutputTuple,
      DynamicInvoiceTokenUpdateProgressEvent.OutputObject
    >;
  };
}
