/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  ErrorLibrary,
  ErrorLibraryInterface,
} from "../../../contracts/libraries/ErrorLibrary";

const _abi = [
  {
    inputs: [],
    name: "AlreadyInitialized",
    type: "error",
  },
  {
    inputs: [],
    name: "AlreadyPaid",
    type: "error",
  },
  {
    inputs: [],
    name: "AlreadyPartialPaid",
    type: "error",
  },
  {
    inputs: [],
    name: "AlreadyPending",
    type: "error",
  },
  {
    inputs: [],
    name: "AlreadyState",
    type: "error",
  },
  {
    inputs: [],
    name: "InsufficientFunds",
    type: "error",
  },
  {
    inputs: [],
    name: "InternalError",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidAddress",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidValue",
    type: "error",
  },
  {
    inputs: [],
    name: "MathError",
    type: "error",
  },
  {
    inputs: [],
    name: "NotBlacklisted",
    type: "error",
  },
  {
    inputs: [],
    name: "NotFound",
    type: "error",
  },
  {
    inputs: [],
    name: "NotInitialized",
    type: "error",
  },
  {
    inputs: [],
    name: "NotPaid",
    type: "error",
  },
  {
    inputs: [],
    name: "NotPartialPaid",
    type: "error",
  },
  {
    inputs: [],
    name: "NotPending",
    type: "error",
  },
  {
    inputs: [],
    name: "NotState",
    type: "error",
  },
  {
    inputs: [],
    name: "NotWhitelisted",
    type: "error",
  },
  {
    inputs: [],
    name: "TransferFailed",
    type: "error",
  },
  {
    inputs: [],
    name: "Unauthorized",
    type: "error",
  },
  {
    inputs: [],
    name: "ZeroValue",
    type: "error",
  },
] as const;

const _bytecode =
  "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220321cede64d176e4f2c115bfc5812583bae6851253e3263f38ba8a3321f1c7b9b64736f6c634300081b0033";

type ErrorLibraryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ErrorLibraryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ErrorLibrary__factory extends ContractFactory {
  constructor(...args: ErrorLibraryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      ErrorLibrary & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): ErrorLibrary__factory {
    return super.connect(runner) as ErrorLibrary__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ErrorLibraryInterface {
    return new Interface(_abi) as ErrorLibraryInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): ErrorLibrary {
    return new Contract(address, _abi, runner) as unknown as ErrorLibrary;
  }
}
