/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IDynamicInvoiceTokenDeployer,
  IDynamicInvoiceTokenDeployerInterface,
} from "../../../contracts/interfaces/IDynamicInvoiceTokenDeployer";

const _abi = [
  {
    inputs: [],
    name: "parameters",
    outputs: [
      {
        internalType: "address",
        name: "registry",
        type: "address",
      },
      {
        internalType: "address",
        name: "factory",
        type: "address",
      },
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol",
        type: "string",
      },
      {
        internalType: "string",
        name: "requestId",
        type: "string",
      },
      {
        internalType: "bytes",
        name: "paymentReference",
        type: "bytes",
      },
      {
        internalType: "address",
        name: "payer",
        type: "address",
      },
      {
        internalType: "address",
        name: "payee",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

export class IDynamicInvoiceTokenDeployer__factory {
  static readonly abi = _abi;
  static createInterface(): IDynamicInvoiceTokenDeployerInterface {
    return new Interface(_abi) as IDynamicInvoiceTokenDeployerInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): IDynamicInvoiceTokenDeployer {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as IDynamicInvoiceTokenDeployer;
  }
}
